package controller

import (
 "{{.Module}}/model"
 "{{.Module}}/service"
 "github.com/gin-gonic/gin"
 "net/http"
 "strconv"
)

type {{.TableName | ToCamelCase}}Controller struct {
 service *service.{{.TableName | ToCamelCase}}Service
}

func New{{.TableName | ToCamelCase}}Controller(service *service.{{.TableName | ToCamelCase}}Service) *{{.TableName | ToCamelCase}}Controller {
 return &{{.TableName | ToCamelCase}}Controller{service: service}
}

func (ctrl *{{.TableName | ToCamelCase}}Controller) Create(c *gin.Context) {
 var entity model.{{.TableName | ToCamelCase}}
 if err := c.ShouldBindJSON(&entity); err != nil {
  c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
  return
 }
 if err := ctrl.service.Create(&entity); err != nil {
  c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
  return
 }
 c.JSON(http.StatusOK, entity)
}

func (ctrl *{{.TableName | ToCamelCase}}Controller) GetByID(c *gin.Context) {
 id, err := strconv.Atoi(c.Param("id"))
 if err != nil {
  c.JSON(http.StatusBadRequest, gin.H{"error": "Invalid ID"})
  return
 }
 entity, err := ctrl.service.GetByID(uint(id))
 if err != nil {
  c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
  return
 }
 c.JSON(http.StatusOK, entity)
}

func (ctrl *{{.TableName | ToCamelCase}}Controller) Update(c *gin.Context) {
 var entity model.{{.TableName | ToCamelCase}}
 if err := c.ShouldBindJSON(&entity); err != nil {
  c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
  return
 }
 if err := ctrl.service.Update(&entity); err != nil {
  c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
  return
 }
 c.JSON(http.StatusOK, entity)
}

func (ctrl *{{.TableName | ToCamelCase}}Controller) Delete(c *gin.Context) {
 id, err := strconv.Atoi(c.Param("id"))
 if err != nil {
  c.JSON(http.StatusBadRequest, gin.H{"error": "Invalid ID"})
  return
 }
 if err := ctrl.service.Delete(uint(id)); err != nil {
  c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
  return
 }
 c.JSON(http.StatusOK, gin.H{"message": "Deleted successfully"})
}