basePath: /
definitions:
  dto.ChangePwdRequest:
    properties:
      NewPassword:
        type: string
      OldPassword:
        type: string
    required:
    - NewPassword
    - OldPassword
    type: object
  dto.CreateApiRequest:
    properties:
      Category:
        maxLength: 50
        minLength: 1
        type: string
      Desc:
        maxLength: 100
        minLength: 0
        type: string
      Method:
        maxLength: 20
        minLength: 1
        type: string
      Path:
        maxLength: 100
        minLength: 1
        type: string
    required:
    - Category
    - Method
    - Path
    type: object
  dto.CreateMenuRequest:
    properties:
      ActiveMenu:
        maxLength: 100
        minLength: 0
        type: string
      AlwaysShow:
        enum:
        - 1
        - 2
        type: integer
      Breadcrumb:
        enum:
        - 1
        - 2
        type: integer
      Component:
        maxLength: 100
        minLength: 1
        type: string
      Hidden:
        enum:
        - 1
        - 2
        type: integer
      Icon:
        maxLength: 50
        minLength: 0
        type: string
      Name:
        maxLength: 50
        minLength: 1
        type: string
      NoCache:
        enum:
        - 1
        - 2
        type: integer
      ParentId:
        type: integer
      Path:
        maxLength: 100
        minLength: 1
        type: string
      Redirect:
        maxLength: 100
        minLength: 0
        type: string
      Sort:
        maximum: 999
        minimum: 1
        type: integer
      Status:
        enum:
        - 1
        - 2
        type: integer
      Title:
        maxLength: 50
        minLength: 1
        type: string
    required:
    - Component
    - Name
    - Path
    - Title
    type: object
  dto.CreateRoleRequest:
    properties:
      Desc:
        maxLength: 100
        minLength: 0
        type: string
      Keyword:
        maxLength: 20
        minLength: 1
        type: string
      Name:
        maxLength: 20
        minLength: 1
        type: string
      Sort:
        maximum: 999
        minimum: 1
        type: integer
      Status:
        enum:
        - 1
        - 2
        type: integer
    required:
    - Keyword
    - Name
    type: object
  dto.CreateUserRequest:
    properties:
      Avatar:
        type: string
      Introduction:
        maxLength: 255
        minLength: 0
        type: string
      Mobile:
        type: string
      NickName:
        maxLength: 20
        minLength: 0
        type: string
      Password:
        type: string
      RoleIds:
        items:
          type: integer
        type: array
      Status:
        enum:
        - 1
        - 2
        type: integer
      UserName:
        maxLength: 20
        minLength: 2
        type: string
    required:
    - Mobile
    - RoleIds
    - UserName
    type: object
  dto.IdListRequest:
    properties:
      Ids:
        items:
          type: integer
        type: array
    type: object
  dto.RegisterAndLoginRequest:
    properties:
      Password:
        type: string
      UserName:
        type: string
    required:
    - Password
    - UserName
    type: object
  dto.UserListRequest:
    properties:
      Mobile:
        type: string
      NickName:
        type: string
      PageNum:
        type: integer
      PageSize:
        type: integer
      Status:
        type: integer
      UserName:
        type: string
    type: object
  util.ResponseBody:
    properties:
      Code:
        type: integer
      Data: {}
      Message:
        type: string
    type: object
host: 192.168.123.214:8088
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample server for a Go web mini project.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Go Web fastgin API
  version: "1.0"
paths:
  /api/auth/api/index:
    delete:
      consumes:
      - application/json
      description: Delete multiple APIs by their Ids
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Delete API request
        in: body
        name: apiIds
        required: true
        schema:
          $ref: '#/definitions/dto.IdListRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/util.ResponseBody'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ResponseBody'
      summary: Batch delete APIs
      tags:
      - API
    get:
      consumes:
      - application/json
      description: Get a list of APIs
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Request method
        in: query
        name: method
        type: string
      - description: Request path
        in: query
        name: path
        type: string
      - description: Category
        in: query
        name: category
        type: string
      - description: Creator
        in: query
        name: creator
        type: string
      - description: Page number
        in: query
        name: PageNum
        type: integer
      - description: Page size
        in: query
        name: PageSize
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/util.ResponseBody'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ResponseBody'
      summary: Get API list
      tags:
      - API
    post:
      consumes:
      - application/json
      description: Create a new API
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Create API request
        in: body
        name: api
        required: true
        schema:
          $ref: '#/definitions/dto.CreateApiRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/util.ResponseBody'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ResponseBody'
      summary: Create API
      tags:
      - API
  /api/auth/api/index/{apiId}:
    put:
      consumes:
      - application/json
      description: Update an existing API by Id
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: API Id
        in: path
        name: apiId
        required: true
        type: integer
      - description: Update API request
        in: body
        name: api
        required: true
        schema:
          $ref: '#/definitions/dto.CreateApiRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/util.ResponseBody'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ResponseBody'
      summary: Update API
      tags:
      - API
  /api/auth/api/tree:
    get:
      consumes:
      - application/json
      description: Get the API tree categorized by the Category field
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/util.ResponseBody'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ResponseBody'
      summary: Get API tree
      tags:
      - API
  /api/auth/log/index:
    delete:
      consumes:
      - application/json
      description: Delete multiple operation logs by their Ids
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Delete operation log request
        in: body
        name: operationLogIds
        required: true
        schema:
          $ref: '#/definitions/dto.IdListRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/util.ResponseBody'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ResponseBody'
      summary: Batch delete operation logs
      tags:
      - OperationLog
    get:
      consumes:
      - application/json
      description: Get a list of operation logs
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Request path
        in: query
        name: path
        type: string
      - description: user_name
        in: query
        name: user_name
        type: string
      - description: ip
        in: query
        name: ip
        type: string
      - description: status
        in: query
        name: status
        type: integer
      - description: Page number
        in: query
        name: PageNum
        type: integer
      - description: Page size
        in: query
        name: PageSize
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/util.ResponseBody'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ResponseBody'
      summary: Get operation log list
      tags:
      - OperationLog
  /api/auth/menu/index:
    delete:
      consumes:
      - application/json
      description: Delete multiple menus by their Ids
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Delete menu request
        in: body
        name: menuIds
        required: true
        schema:
          $ref: '#/definitions/dto.IdListRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/util.ResponseBody'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ResponseBody'
      summary: Batch delete menus
      tags:
      - Menu
    post:
      consumes:
      - application/json
      description: Create a new menu
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Create menu request
        in: body
        name: menu
        required: true
        schema:
          $ref: '#/definitions/dto.CreateMenuRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/util.ResponseBody'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ResponseBody'
      summary: Create menu
      tags:
      - Menu
  /api/auth/menu/index/{menuId}:
    put:
      consumes:
      - application/json
      description: Update an existing menu by Id
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Menu Id
        in: path
        name: menuId
        required: true
        type: integer
      - description: Update menu request
        in: body
        name: menu
        required: true
        schema:
          $ref: '#/definitions/dto.CreateMenuRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/util.ResponseBody'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ResponseBody'
      summary: Update menu
      tags:
      - Menu
  /api/auth/menu/tree:
    get:
      consumes:
      - application/json
      description: Get the menu tree
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/util.ResponseBody'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ResponseBody'
      summary: Get menu tree
      tags:
      - Menu
  /api/auth/menu/user/{userId}:
    get:
      consumes:
      - application/json
      description: Get the accessible menus for a user by user Id
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User Id
        in: path
        name: userId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/util.ResponseBody'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ResponseBody'
      summary: Get user menus by user Id
      tags:
      - Menu
  /api/auth/menu/user_tree/{userId}:
    get:
      consumes:
      - application/json
      description: Get the accessible menu tree for a user by user Id
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User Id
        in: path
        name: userId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/util.ResponseBody'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ResponseBody'
      summary: Get user menu tree by user Id
      tags:
      - Menu
  /api/auth/menus:
    get:
      consumes:
      - application/json
      description: Get a list of menus
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/util.ResponseBody'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ResponseBody'
      summary: Get menu list
      tags:
      - Menu
  /api/auth/role/apis/{roleId}:
    get:
      consumes:
      - application/json
      description: Get the APIs for a role by Id
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Role Id
        in: path
        name: roleId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/util.ResponseBody'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ResponseBody'
      summary: Get role APIs by Id
      tags:
      - Role
    put:
      consumes:
      - application/json
      description: Update the APIs for a role by Id
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Role Id
        in: path
        name: roleId
        required: true
        type: integer
      - description: Update role APIs request
        in: body
        name: apis
        required: true
        schema:
          $ref: '#/definitions/dto.IdListRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/util.ResponseBody'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ResponseBody'
      summary: Update role APIs by Id
      tags:
      - Role
  /api/auth/role/index:
    delete:
      consumes:
      - application/json
      description: Delete multiple roles by their Ids
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Delete role request
        in: body
        name: roleIds
        required: true
        schema:
          $ref: '#/definitions/dto.IdListRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/util.ResponseBody'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ResponseBody'
      summary: Batch delete roles
      tags:
      - Role
    get:
      consumes:
      - application/json
      description: Get a list of roles
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Role name
        in: query
        name: name
        type: string
      - description: Role status
        in: query
        name: status
        type: integer
      - description: Page number
        in: query
        name: pageNum
        type: integer
      - description: Page size
        in: query
        name: pageSize
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/util.ResponseBody'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ResponseBody'
      summary: Get role list
      tags:
      - Role
    post:
      consumes:
      - application/json
      description: Create a new role
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Create role request
        in: body
        name: role
        required: true
        schema:
          $ref: '#/definitions/dto.CreateRoleRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/util.ResponseBody'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ResponseBody'
      summary: Create role
      tags:
      - Role
  /api/auth/role/index/{roleId}:
    put:
      consumes:
      - application/json
      description: Update an existing role by Id
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Role Id
        in: path
        name: roleId
        required: true
        type: integer
      - description: Update role request
        in: body
        name: role
        required: true
        schema:
          $ref: '#/definitions/dto.CreateRoleRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/util.ResponseBody'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ResponseBody'
      summary: Update role
      tags:
      - Role
  /api/auth/role/menus/{roleId}:
    get:
      consumes:
      - application/json
      description: Get the menus for a role by Id
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Role Id
        in: path
        name: roleId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/util.ResponseBody'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ResponseBody'
      summary: Get role menus by Id
      tags:
      - Role
    put:
      consumes:
      - application/json
      description: Update the menus for a role by Id
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Role Id
        in: path
        name: roleId
        required: true
        type: integer
      - description: Update role menus request
        in: body
        name: menus
        required: true
        schema:
          $ref: '#/definitions/dto.IdListRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/util.ResponseBody'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ResponseBody'
      summary: Update role menus by Id
      tags:
      - Role
  /api/auth/system/info:
    get:
      description: 获取系统的详细信息
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      summary: 获取系统信息
      tags:
      - 系统
  /api/auth/system/restart:
    get:
      description: 重启服务器的运行
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      responses:
        "200":
          description: 重启服务成功
          schema:
            type: string
      summary: 重启服务器
      tags:
      - 系统
  /api/auth/system/stop:
    get:
      description: 停止服务器的运行
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      responses:
        "200":
          description: 停止服务成功
          schema:
            type: string
      summary: 停止服务器
      tags:
      - 系统
  /api/auth/user/changePwd:
    post:
      consumes:
      - application/json
      description: 更新用户登录密码
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Change password request
        in: body
        name: ChangePwdRequest
        required: true
        schema:
          $ref: '#/definitions/dto.ChangePwdRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/util.ResponseBody'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ResponseBody'
      summary: 更新用户登录密码
      tags:
      - User
  /api/auth/user/index:
    delete:
      consumes:
      - application/json
      description: 批量删除用户
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Delete user request
        in: body
        name: DeleteUserRequest
        required: true
        schema:
          $ref: '#/definitions/dto.IdListRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/util.ResponseBody'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ResponseBody'
      summary: 批量删除用户
      tags:
      - User
    get:
      consumes:
      - application/json
      description: 获取用户列表
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User list request
        in: body
        name: UserListRequest
        required: true
        schema:
          $ref: '#/definitions/dto.UserListRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/util.ResponseBody'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ResponseBody'
      summary: 获取用户列表
      tags:
      - User
    post:
      consumes:
      - application/json
      description: 创建用户
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Create user request
        in: body
        name: CreateUserRequest
        required: true
        schema:
          $ref: '#/definitions/dto.CreateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/util.ResponseBody'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ResponseBody'
      summary: 创建用户
      tags:
      - User
  /api/auth/user/index/{userId}:
    put:
      consumes:
      - application/json
      description: 更新用户
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User Id
        in: path
        name: userId
        required: true
        type: integer
      - description: Update user request
        in: body
        name: CreateUserRequest
        required: true
        schema:
          $ref: '#/definitions/dto.CreateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/util.ResponseBody'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ResponseBody'
      summary: 更新用户
      tags:
      - User
  /api/auth/user/info:
    get:
      consumes:
      - application/json
      description: 获取当前登录用户信息
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/util.ResponseBody'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ResponseBody'
      summary: 获取当前登录用户信息
      tags:
      - User
  /api/auth/user/logout:
    post:
      description: 用户登出
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      responses:
        "200":
          description: '{"code":200}'
          schema:
            additionalProperties: true
            type: object
      summary: 登出
      tags:
      - User
  /api/auth/user/refreshToken:
    post:
      description: 刷新JWT Token
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      responses:
        "200":
          description: '{"code":200,"token":"xxx","expire":"xxx"}'
          schema:
            additionalProperties: true
            type: object
        "401":
          description: '{"code":401,"message":"Unauthorized"}'
          schema:
            additionalProperties: true
            type: object
      summary: 刷新Token
      tags:
      - User
  /api/public/login:
    post:
      consumes:
      - application/json
      description: '用户登录获取JWT Token {"UserName": "testlog", "Password": "123456"}'
      parameters:
      - description: 登录信息
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/dto.RegisterAndLoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":200,"token":"xxx","expire":"xxx"}'
          schema:
            additionalProperties: true
            type: object
        "401":
          description: '{"code":401,"message":"Unauthorized"}'
          schema:
            additionalProperties: true
            type: object
      summary: 用户登录
      tags:
      - 公开接口
swagger: "2.0"
